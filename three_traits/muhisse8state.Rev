#########################################################################################################
#
# MuHiSSE pollination, ploidy, and sexual systems with fixed root as IDH
#
# authors: Rosana Zenil-Ferguson
# last modified: 05/13/2024
#########################################################################################################
#######################
# Reading in the Data #
#######################
# 0 = Insect Diploid Hermaphroditic
# 1 = Insect Diploid Unisexual
# 2 = Insect Polyploid Hermaphroditic
# 3 = Insect Polyploid Unisexual
# 4 = Wind Diploid Hermaphroditic
# 5 = Wind Diploid Unisexual
# 6 = Wind Polyploid Hermaphroditic
# 7 = Wind Polyploid Unisexual

setOption("useScaling","true")
NUM_STATES = 8
NUM_HIDDEN= 2
NUM_RATES = NUM_STATES * NUM_HIDDEN
### Read in the data

observed_phylogeny<- readTrees("basicdata/thalmatchphy.tre")[1]

data <- readCharacterDataDelimited("basicdata/eightstate.tsv",stateLabels=8,type="NaturalNumbers",delimiter="\t",header=FALSE)

# we need to expand the data to the hidden states
data_exp <- data.expandCharacters( NUM_HIDDEN )

# Get some useful variables from the data. We need these later on.
taxa <- observed_phylogeny.taxa()

# set my move index
mvi = 0
mni = 0

H = 0.587405

####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates
## Number of surviving lineages is 103
rate_mean <- ln( ln(103/2.0) / observed_phylogeny.rootAge() )
rate_sd <- 2*H

for (i in 1:NUM_STATES) {
### Create a lognormal distributed variable for the diversification rate
speciation_alpha[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(speciation_alpha[i],delta=0.20,tune=true,weight=3.0)


### Create a lognormal distributed variable for the turnover rate
extinction_alpha[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(extinction_alpha[i],delta=0.20,tune=true,weight=3.0)


}


for (i in 1:NUM_HIDDEN) {

### Create an exponential distributed variable for the diversification rate
speciation_beta[i] ~ dnExp(1.0)
moves[++mvi] = mvScale(speciation_beta[i],lambda=0.20,tune=true,weight=2.0)

### Create an normal distributed variable for the turnover rate
extinction_beta[i] ~ dnNormal(0.0,1.0)
moves[++mvi] = mvSlide(extinction_beta[i],delta=0.20,tune=true,weight=2.0)

}

for (j in 1:NUM_HIDDEN) {
for (i in 1:NUM_STATES) {
if ( j == 1) {
speciation[i] := exp( speciation_alpha[i] )
extinction[i] := exp( extinction_alpha[i] )
} else {
index = i+(j*NUM_STATES)-NUM_STATES
speciation[index] := speciation[index-NUM_STATES] * exp( speciation_beta[j-1] )
extinction[index] := exp( extinction_alpha[i] + extinction_beta[j-1] )
}
}
}

#########################################################
# Set up the transition rate matrix for observed states #
#########################################################
## I defined very loosely my gamma priors for rates in the Q-mat
shape_pr := 0.5
#rate_pr := 1
############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
 rate_pr := observed_phylogeny.treeLength()/10

# 0, 8 = Insect Diploid Hermaphroditic
# 1,9 = Insect Diploid Unisexual
# 2,10 = Insect Polyploid Hermaphroditic
# 3,11 = Insect Polyploid Unisexual
# 4,12 = Wind Diploid Hermaphroditic
# 5,13 = Wind Diploid Unisexual
# 6,14 = Wind Polyploid Hermaphroditic
# 7,15 = Wind Polyploid Unisexual


#Unisexual and poly rates top
rate_12 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_13 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_24 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_34 ~ dnGamma(shape=shape_pr, rate=rate_pr)

#Unisexual and poly rates bottom
rate_56 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_57 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_68 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_78 ~ dnGamma(shape=shape_pr, rate=rate_pr)

#Wind insect
rate_15 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_51 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_26 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_62 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_37 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_73 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_48 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_84 ~ dnGamma(shape=shape_pr, rate=rate_pr)

##Hidden rates
alpha ~ dnGamma(shape=shape_pr, rate=rate_pr)
beta  ~ dnGamma(shape=shape_pr, rate=rate_pr)
moves[++mvi] = mvScale( rate_12, weight=2 )
moves[++mvi] = mvScale( rate_13, weight=2 )
moves[++mvi] = mvScale( rate_24, weight=2 )
moves[++mvi] = mvScale( rate_34, weight=2 )
moves[++mvi] = mvScale( rate_56, weight=2 )
moves[++mvi] = mvScale( rate_57, weight=2 )
moves[++mvi] = mvScale( rate_68, weight=2 )
moves[++mvi] = mvScale( rate_78, weight=2 )
moves[++mvi] = mvScale( rate_15, weight=2 )
moves[++mvi] = mvScale( rate_51, weight=2 )
moves[++mvi] = mvScale( rate_26, weight=2 )
moves[++mvi] = mvScale( rate_62, weight=2 )
moves[++mvi] = mvScale( rate_37, weight=2 )
moves[++mvi] = mvScale( rate_73, weight=2 )
moves[++mvi] = mvScale( rate_48, weight=2 )
moves[++mvi] = mvScale( rate_84, weight=2 )
moves[++mvi] = mvScale( alpha, weight=2 )
moves[++mvi] = mvScale( beta, weight=2 )
######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
# first initialize the matrix with all zeros:
for (i in 1:NUM_RATES) {
for (j in 1:NUM_RATES) {
q[i][j] := 0.0
}
}
q[1][2] := rate_12
q[1][3] := rate_13
q[2][4] := rate_24
q[3][4] := rate_34
q[5][6] := rate_56
q[5][7] := rate_57
q[6][8] := rate_68
q[7][8] := rate_78
q[1][5] := rate_15
q[5][1] := rate_51
q[2][6] := rate_26
q[6][2] := rate_62
q[3][7] := rate_37
q[7][3] := rate_73
q[4][8] := rate_48
q[8][4] := rate_84

# 0, 8 = Insect Diploid Hermaphroditic
# 1,9 = Insect Diploid Unisexual
# 2,10 = Insect Polyploid Hermaphroditic
# 3,11 = Insect Polyploid Unisexual
# 4,12 = Wind Diploid Hermaphroditic
# 5,13 = Wind Diploid Unisexual
# 6,14 = Wind Polyploid Hermaphroditic
# 7,15 = Wind Polyploid Unisexual

q[9][10] := rate_12
q[9][11] := rate_13
q[10][12] := rate_24
q[11][12] := rate_34
q[13][14] := rate_56
q[13][15] := rate_57
q[14][16] := rate_68
q[15][16] := rate_78
q[9][13] := rate_15
q[13][9] := rate_51
q[9][13] := rate_15
q[13][9] := rate_51
q[10][14] := rate_26
q[14][10] := rate_62
q[11][15] := rate_37
q[15][11] := rate_73
q[12][16] := rate_48
q[16][12] := rate_84

###Hidden states

q[1][9] := alpha
q[9][1] := beta
q[2][10] := alpha
q[10][2] := beta
q[3][11] := alpha
q[11][3] := beta
q[4][12] := alpha
q[12][4] := beta
q[5][13] := alpha
q[13][5] := beta
q[6][14] := alpha
q[14][6] := beta
q[7][15] := alpha
q[15][7] := beta
q[8][16] := alpha
q[16][8] := beta

# generate the actual matrix
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

#####################################
# Set up the root state frequencies #
# We're going to estimate them and not set them up#
#####################################

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior<- [0.5,0,0,0,0,0,0,0,0.5,0,0,0,0,0,0,0]
#moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)

### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()

### I did not add any sampling of species but it is posible by setting this rho parameter
### rho is the probability of sampling species at the present
### fix this
rho <- 0.5


####################################################################
# Building the BiSSE Model as discrete character model+ BD process#
###################################################################

### Here is where I tie speciation, extinction, and Q using a Birth-Death with categories
timetree ~ dnCDBDP( rootAge           = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = rho,
delta             = 1.0,
condition         = "time" )

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data_exp )



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnModel(filename="output/muhisse_eightstate.log", printgen=1)
monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=1000, withTips=true, withStartStates=false, filename="output/anc_states_musse_eightstate.log")
monitors[++mni] = mnScreen(printgen=10, rate_12, speciation, extinction)


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random")

### pre-burnin to tune the proposals 20% of the sample
#mymcmc.burnin(generations=2000,tuningInterval=100)

### run the MCMC
mymcmc.run(generations=500000)

##############################
# Summarize ancestral states #
##############################


#anc_states = readAncestralStateTrace("basicdata/anc_states_musse_eightstate.log")
#anc_tree = ancestralStateTree(tree=observed_phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="basidata/anc_states_musse_eightstate.tree", summary_statistic="MAP", site=0)

q()


